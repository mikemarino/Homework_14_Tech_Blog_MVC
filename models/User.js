// User Table to store user information of all the post authors.
// The same table can be used to relate the post authors so that 
//all the authors can manage their own posts.
const {
  Model,
  DataTypes
} = require('sequelize');
const bcrypt = require('bcrypt');
const sequelize = require('../config/connection');

class User extends Model {
  checkPassword(loginPw) {
    return bcrypt.compareSync(loginPw, this.password);
  }
}

User.init({
  // The unique id to identify the user.
  id: {
    type: DataTypes.INTEGER,
    allowNull: false,
    primaryKey: true,
    autoIncrement: true,
  },
  // The first name of the user.
  first_name: {
    type: DataTypes.STRING,
    allowNull: true,
  },
  // The middle name of the user.
  middle_name: {
    type: DataTypes.STRING,
    allowNull: true,
  },
  // The last name of the user.
  last_name: {
    type: DataTypes.STRING,
    allowNull: true,
  },
  // The mobile number of the user. It can be used for login and registration purposes.
  mobile: {
    type: DataTypes.STRING,
    allowNull: true,
    unique: true,
  },
  // The email of the user. It can be used for login and registration purposes.
  email: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true,
    validate: {
      isEmail: true,
    },
  },
  // 	The password hash generated by the appropriate algorithm. We must avoid storing plain passwords.
  password: {
    type: DataTypes.STRING,
    allowNull: false,
    validate: {
      len: [8],
    },
  },
  // This column can be used to calculate the life of the user with the blog.
  regiseredAt: {
    type: DataTypes.DATE,
    allowNull: true,
  },
  // 	It can be used to identify the last login of the user.
  lastLogin: {
    type: DataTypes.DATE,
    allowNull: true,
    defaultValue: DataTypes.NOW,

  },
  // 	The brief introduction of the Author to be displayed on each post.
  intro: {
    type: DataTypes.TEXT,
    allowNull: true,
    defaultValue: "",

  },
  //	The author details to be displayed on the Author Page.
  profile: {
    type: DataTypes.TEXT,
    allowNull: true,
    defaultValue: "",
  }
}, {
  hooks: {
    beforeCreate: async (newUserData) => {
      newUserData.password = await bcrypt.hash(newUserData.password, 10);
      return newUserData;
    },
    beforeUpdate: async (updatedUserData) => {
      updatedUserData.password = await bcrypt.hash(updatedUserData.password, 10);
      return updatedUserData;
    },
  },
  sequelize,
  timestamps: false,
  freezeTableName: true,
  underscored: true,
  modelName: 'user',
});

module.exports = User;